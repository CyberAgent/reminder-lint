name: Release

permissions:
  contents: write
  pull-requests: write
  packages: write

on:
  workflow_dispatch:
    inputs:
      version:
        description: "new version"
        type: string

jobs:
  tag-version-on-main:
    if: github.ref_name != 'main'
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    outputs:
      tag: ${{ github.event.inputs.version }}
      tag-flag: ${{ format('--tag={0}', github.event.inputs.version) }}
    env:
      GH_TOKEN: ${{ github.token }}

    steps:
      - name: Validate input
        run: |
          if [[ "${{ github.event.inputs.version }}" =~ ^v ]]; then
            echo "Error: version must not start with 'v'"
            exit 1
          fi

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 1.85

      - name: Install cargo-release
        run: cargo install cargo-release --locked

      - name: Cargo release version
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          cargo release version --execute --no-confirm ${{ github.event.inputs.version }}

      - id: git-cliff
        name: Generate the changelog
        uses: orhun/git-cliff-action@v3
        with:
          config: cliff.toml
          args: --verbose --tag "${{ github.event.inputs.version }}"
        env:
          OUTPUT: CHANGELOG.md

      - name: Cargo release commit
        run: |
          git checkout -b release-${{ github.event.inputs.version }}
          git add CHANGELOG.md
          cargo release commit --execute --no-confirm
          git push -u origin HEAD

      - name: Tag and push version
        run: |
          git fetch origin ${{ github.ref_name }}
          git tag "${{ github.event.inputs.version }}"
          git push origin "${{ github.event.inputs.version }}"

      - name: Create release pull request
        env:
          PR_BODY: ${{ steps.git-cliff.outputs.content }}
        run: |
          gh pr create --title "Release ${{ github.event.inputs.version }}" --body "$PR_BODY" --base "main"

  tag-only-on-other:
    if: github.ref_name == 'main'
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    outputs:
      tag: ${{ github.event.inputs.version }}
      tag-flag: ${{ format('--tag={0}', github.event.inputs.version) }}
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Validate input
        run: |
          if [[ "${{ github.event.inputs.version }}" =~ ^v ]]; then
            echo "Error: version must not start with 'v'"
            exit 1
          fi

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Tag and push version
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git tag "${{ github.event.inputs.version }}"
          git push origin "${{ github.event.inputs.version }}"

  tag-version:
    runs-on: ubuntu-24.04
    needs: [tag-version-on-main, tag-only-on-other]
    if: always()
    outputs:
      tag: ${{ needs.tag-version-on-main.outputs.tag || needs.tag-only-on-other.outputs.tag }}
      tag-flag: ${{ needs.tag-version-on-main.outputs.tag-flag || needs.tag-only-on-other.outputs.tag-flag }}
    steps:
      - run: echo "Tagging is done."

  # build-and-push:
  #   needs:
  #     - tag-version
  #   runs-on: ubuntu-24.04
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         ref: ${{ github.event.inputs.version }}

  #     - uses: docker/setup-qemu-action@v3

  #     - uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ github.token }}

  #     - uses: docker/metadata-action@v5
  #       id: meta
  #       with:
  #         images: ghcr.io/${{ github.repository }}
  #         tags: |
  #           type=semver,pattern={{major}},enable=${{ github.ref_name == 'main' }}
  #           type=semver,pattern={{major}}.{{minor}},enable=${{ github.ref_name == 'main' }}
  #           type=raw,value=latest,enable=${{ github.ref_name == 'main' }}
  #           type=raw,value=${{ github.event.inputs.version }}

  #     - id: buildx
  #       uses: docker/setup-buildx-action@v3

  #     - uses: docker/build-push-action@v4
  #       with:
  #         builder: ${{ steps.buildx.outputs.name }}
  #         platforms: linux/amd64,linux/arm64
  #         context: .
  #         push: true
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}

  # plan:
  #   needs:
  #     - tag-version
  #   runs-on: ubuntu-24.04
  #   outputs:
  #     val: ${{ steps.plan.outputs.manifest }}
  #   env:
  #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         ref: ${{ github.event.inputs.version }}

  #     - name: Install cargo-dist
  #       shell: bash
  #       run: cargo install cargo-dist --locked

  #     - id: plan
  #       run: |
  #         dist plan --output-format=json > plan-dist-manifest.json
  #         cat plan-dist-manifest.json
  #         echo "manifest=$(jq -c "." plan-dist-manifest.json)" >> "$GITHUB_OUTPUT"

  #     - name: Upload dist-manifest.json
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: artifacts-plan-dist-manifest
  #         path: plan-dist-manifest.json

  # build-local-artifacts:
  #   name: build-local-artifacts (${{ join(matrix.targets, ', ') }})
  #   needs:
  #     - tag-version
  #     - plan
  #   strategy:
  #     fail-fast: false
  #     matrix: ${{ fromJson(needs.plan.outputs.val).ci.github.artifacts_matrix }}
  #   runs-on: ${{ matrix.runner }}
  #   env:
  #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     BUILD_MANIFEST_NAME: target/distrib/${{ join(matrix.targets, '-') }}-dist-manifest.json
  #   steps:
  #     - name: enable windows longpaths
  #       run: |
  #         git config --global core.longpaths true

  #     - uses: actions/checkout@v4
  #       with:
  #         ref: ${{ github.event.inputs.version }}

  #     - uses: swatinem/rust-cache@v2
  #       with:
  #         key: ${{ join(matrix.targets, '-') }}
  #         cache-provider: ${{ matrix.cache_provider }}

  #     - name: Install cargo-dist
  #       run: cargo install cargo-dist --locked

  #     - name: Fetch local artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         pattern: artifacts-*
  #         path: target/distrib/
  #         merge-multiple: true

  #     - name: Install dependencies
  #       run: |
  #         ${{ matrix.packages_install }}

  #     - name: Build artifacts
  #       run: |
  #         dist build ${{ needs.tag-version.outputs.tag-flag }} --print=linkage --output-format=json ${{ matrix.dist_args }} > dist-manifest.json

  #     - id: cargo-dist
  #       name: Post-build
  #       shell: bash
  #       run: |
  #         echo "paths<<EOF" >> "$GITHUB_OUTPUT"
  #         jq --raw-output ".upload_files[]" dist-manifest.json >> "$GITHUB_OUTPUT"
  #         echo "EOF" >> "$GITHUB_OUTPUT"
  #         cp dist-manifest.json "$BUILD_MANIFEST_NAME"

  #     - name: Upload artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: artifacts-build-local-${{ join(matrix.targets, '_') }}
  #         path: |
  #           ${{ steps.cargo-dist.outputs.paths }}
  #           ${{ env.BUILD_MANIFEST_NAME }}

  # build-global-artifacts:
  #   needs:
  #     - tag-version
  #     - plan
  #     - build-local-artifacts
  #   runs-on: ubuntu-24.04
  #   env:
  #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     BUILD_MANIFEST_NAME: target/distrib/global-dist-manifest.json
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         ref: ${{ github.event.inputs.version }}

  #     - name: Install cargo-dist
  #       shell: bash
  #       run: cargo install cargo-dist --locked

  #     - name: Fetch local artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         pattern: artifacts-*
  #         path: target/distrib/
  #         merge-multiple: true

  #     - id: cargo-dist
  #       shell: bash
  #       run: |
  #         dist build ${{ needs.tag-version.outputs.tag-flag }} --output-format=json "--artifacts=global" > dist-manifest.json
  #         echo "dist ran successfully"

  #         # Parse out what we just built and upload it to scratch storage
  #         echo "paths<<EOF" >> "$GITHUB_OUTPUT"
  #         jq --raw-output ".upload_files[]" dist-manifest.json >> "$GITHUB_OUTPUT"
  #         echo "EOF" >> "$GITHUB_OUTPUT"

  #         cp dist-manifest.json "$BUILD_MANIFEST_NAME"
  #     - name: Upload artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: artifacts-build-global
  #         path: |
  #           ${{ steps.cargo-dist.outputs.paths }}
  #           ${{ env.BUILD_MANIFEST_NAME }}

  # host:
  #   needs:
  #     - tag-version
  #     - plan
  #     - build-local-artifacts
  #     - build-global-artifacts
  #   env:
  #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #   runs-on: ubuntu-24.04
  #   outputs:
  #     val: ${{ steps.host.outputs.manifest }}
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         ref: ${{ github.event.inputs.version }}

  #     - name: Install cargo-dist
  #       run: cargo install cargo-dist --locked

  #     - name: Fetch artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         pattern: artifacts-*
  #         path: target/distrib/
  #         merge-multiple: true

  #     - id: host
  #       shell: bash
  #       run: |
  #         dist host ${{ needs.tag-version.outputs.tag-flag }} --steps=upload --steps=release --output-format=json > dist-manifest.json
  #         echo "artifacts uploaded and released successfully"
  #         cat dist-manifest.json
  #         echo "manifest=$(jq -c "." dist-manifest.json)" >> "$GITHUB_OUTPUT"

  #     - name: Upload dist-manifest.json
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: artifacts-dist-manifest
  #         path: dist-manifest.json

  # announce:
  #   needs:
  #     - tag-version
  #     - plan
  #     - host
  #   runs-on: ubuntu-24.04
  #   env:
  #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         ref: ${{ github.event.inputs.version }}

  #     - name: Download GitHub Artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         pattern: artifacts-*
  #         path: artifacts
  #         merge-multiple: true

  #     - name: Cleanup
  #       run: |
  #         rm -f artifacts/*-dist-manifest.json

  #     - name: Create GitHub Release
  #       env:
  #         PRERELEASE_FLAG: "${{ fromJson(needs.host.outputs.val).announcement_is_prerelease && '--prerelease' || '' }}"
  #         ANNOUNCEMENT_TITLE: "${{ fromJson(needs.host.outputs.val).announcement_title }}"
  #         ANNOUNCEMENT_BODY: "${{ fromJson(needs.host.outputs.val).announcement_github_body }}"
  #       run: |
  #         echo "$ANNOUNCEMENT_BODY" > $RUNNER_TEMP/notes.txt
  #         gh release create "${{ github.event.inputs.version }}" --title "$ANNOUNCEMENT_TITLE" --notes-file "$RUNNER_TEMP/notes.txt" $PRERELEASE_FLAG
  #         gh release upload "${{ github.event.inputs.version }}" artifacts/*
